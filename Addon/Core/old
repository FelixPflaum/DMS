



---Set response for a player.
---@param distGUID string
---@param playerName string
---@param responseId integer
---@param hostOverride boolean|nil Override response.
---@return boolean started
---@return string|nil errorMessage
function LootSession:SetResponse(distGUID, playerName, responseId, hostOverride)
    if self.isFinished then
        return false, "session already finished"
    end

    local lootItem = self.items[distGUID]
    if not lootItem then
        return false, "invalid dist guid"
    end

    if lootItem.parentGUID then
        return false, "item is a duplicate, can only respond to parent"
    end

    if lootItem.status ~= "waiting" then
        return false, "rolls are already closed"
    end

    local lootItemClient = lootItem.responses[playerName]
    if not lootItemClient then
        return false, "client unknown"
    end

    if lootItemClient.response.canSelect and not hostOverride then
        return false, "already responded"
    end

    local response = self.ResponseCheck:GetResponseById(responseId)

    if not response then
        return false, "invalid response"
    end

    if response.isPointsRoll then
        local player = DB:GetPlayer(playerName)
        if not player then
            return false, "player not in database"
        end
        lootItemClient.points = player.points
    end

    if not lootItemClient.roll then
        lootItemClient.roll = lootItem.roller:GetRoll()
    end

    lootItemClient.response = response
    self.OnItemClientUpdate:Trigger(self, lootItem, lootItemClient)
    return true
end

---Award an item.
---@param distGUID string
---@param playerName string
---@return boolean success
---@return string|nil errorMessage
function LootSession:AwardItem(distGUID, playerName)
    if self.isFinished then
        return false, "session already finished"
    end

    local item = self.items[distGUID]
    if not item then
        return false, "item does not exist"
    end

    local itemClient = item.responses[playerName]
    if not itemClient then
        return false, "client unknown"
    end

    item.awardedTo = playerName

    -- TODO: update DBs

    local channel = DMS:SelectGroupChannel()
    if channel then
        SendChatMessage(L["Awarded %s for %s to %s"]:format(item.itemId, itemClient.response.displayString, playerName), channel)
    end

    self.OnItemAwarded:Trigger(self, item, itemClient)
    self:UnveilNextItem()

    return true
end

function LootSession:RevertAward(distGUID)
    if self.isFinished then
        return false, "session already finished"
    end

    local item = self.items[distGUID]
    if not item then
        return false, "item does not exist"
    end

    local winner = item.awardedTo
    if not winner then
        return false, "item wasn't awarded"
    end

    local itemClient = item.responses[winner]
    if not itemClient then
        return false, "client not found"
    end

    -- TODO: DB changes

    item.awardedTo = nil

    self.OnItemAwardReverted:Trigger(self, item, itemClient)
end
